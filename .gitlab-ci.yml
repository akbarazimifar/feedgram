image: python:3.6-alpine

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages </3
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If we want to also cache the installed packages, we have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

variables:
  DSETUPTOOLS_DEB_LAYOUT: "OFF"

stages:
  - build
  - verify
  - test
  - package
  - release

default:
  before_script:
    - python -V  # For debugging
    - pip --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate

Build:
  stage: build
  except:
    - tags
  script:
    # pip fails to install `mister-bump` sometimes, so we force a manual install
    # ...yes, pip is utterly undeterministic! >:(
    - |
      pip install -r requirements.txt && \
      pip install -r test-requirements.txt
    - python setup.py install

flake8:
  stage: verify
  except:
    - tags
  script:
    - echo "Start verify"
    - flake8
    - echo "Finished verify"

pylint:
  stage: verify
  except:
    - tags
  script:
    - mkdir ./pylint
    - pylint --output-format=text --rcfile=setup.cfg feedgram/ test/ *.py | tee ./pylint/pylint.log || pylint-exit $?
    - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint.log)
    - anybadge --label="Pylint score" --file=pylint/pylint.svg --value=$PYLINT_SCORE 2=red 4=orange 8=yellow 10=green
    - FEEDGRAM_V=$(cat version)
    - echo "Pylint score is $PYLINT_SCORE"
    - anybadge --label="FeedGram" --file=pylint/app_version.svg --value=v$FEEDGRAM_V --color=#0088cc
    - anybadge --label="platform" --file=pylint/plaform.svg --value="Debian | Ubuntu | Wheel" --color=#007ec6
    - anybadge --label="python" --file=pylint/python_ver.svg --value="3.6 | 3.7 | 3.8" --color=#007ec6
    - anybadge --label="wheel" --file=pylint/wheel.svg --value="yes" --color=#4c1
    - anybadge --label="pip install" --file=pylint/pip_install.svg --value="feedgram" --color=#007ec6
  artifacts:
    paths:
      - ./pylint/

pytest:
  stage: test
  except:
    - tags
  script:
    - echo "Start test"
    - pip install -r requirements.txt
    - pytest test/
    - echo "Finished test"
  artifacts:
    expire_in: 1 mos
    paths:
      - coverage/junit_coverage.xml
    reports:
      junit: coverage/junit_coverage.xml

pipwhl:
  stage: package
  except:
    - tags
  only:
    - master
    - develop
  script:
    - python setup.py bdist_wheel
    - pip install dist/*
  artifacts:
    paths:
      - dist/*.whl
    expire_in: 1 week

Debian_10:
  stage: package
  image: debian:10
  except:
    - tags
  only:
    - master
    - develop
  before_script:
    - apt-get -qq update
    - apt-get -qq install python3 python3-venv python3-pip fakeroot python3-all debhelper python-all python3-setuptools build-essential #tree
    - python3 -V  # For debugging
    - python3 -m venv .
    - source bin/activate
  script:
    - echo "Start package"
    - pip3 install wheel
    - pip3 install stdeb setuptools
    - python3 setup.py --command-packages=stdeb.command bdist_deb
    - mv deb_dist dist/ 
    #- tree
    - echo "Build finished"
  artifacts:
    paths:
      - dist/deb_dist/
    expire_in: 1 week
    
Ubuntu_18.04:
  stage: package
  image: ubuntu:18.04
  except:
    - tags
  only:
    - master
    - develop
  variables:
    LC_CTYPE: en_US.UTF-8
    LANG: en_US.UTF-8
    LANGUAGE: en_US.UTF-8
    LC_ALL: en_US.UTF-8
  before_script:
    - apt-get -qq update
    - apt-get -qq install python3 python3-venv python3-pip fakeroot python3-all debhelper python-all python3-setuptools build-essential locales language-pack-en #tree
    - python3 -V  # For debugging
    - python3 -m venv .
    - source bin/activate
  script:
    - echo "Start package"
    - pip3 install wheel
    - pip3 install stdeb setuptools
    - python3 setup.py --command-packages=stdeb.command bdist_deb
    - mv deb_dist dist/ubuntu_dist
    #- tree
    - echo "Build finished"
  artifacts:
      paths:
        - dist/ubuntu_dist/
      expire_in: 1 week


docker-prod:
  image: docker:latest
  stage: package
  services:
    - docker:dind
  except:
    - tags
  only:
    - master
  before_script:
    - echo $CI_BUILD_TOKEN | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - "[ -f ./version ] && export VERSION=$(cat ./version)"
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker tag "$CI_REGISTRY_IMAGE" "$CI_REGISTRY_IMAGE:latest"
    - docker tag "$CI_REGISTRY_IMAGE" "$CI_REGISTRY_IMAGE:$VERSION"
    - docker push "$CI_REGISTRY_IMAGE"


docker-dev:
  image: docker:latest
  stage: package
  services:
    - docker:dind
  except:
    - tags
  only:
    - develop
  before_script:
    - echo $CI_BUILD_TOKEN | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - "[ -f ./version ] && export VERSION=$(cat ./version)"
    - export TIMESTAMP=$(date +%s)
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker tag "$CI_REGISTRY_IMAGE" "$CI_REGISTRY_IMAGE:dev-$VERSION-$TIMESTAMP"
    - docker push "$CI_REGISTRY_IMAGE:dev-$VERSION-$TIMESTAMP"


GitlabRelease:
  image: python:3.6
  stage: release
  before_script:
    - apt-get update 
    - apt-get -y -qq install curl jq
    - python3 -V
  except:
    - tags
  only:
    - master
  script:
    - "[ -f ./version ] && export VERSION=$(cat ./version)"
    - echo ${VERSION}
    - "[ -f ./pjname ] && export PJNAME=$(cat ./pjname)"
    - echo ${PJNAME}
    - "[ -f ./CHANGELOG.md ] && export CHANGELOG=$(awk -v ver=${VERSION} '/^## Version /{ if (p) { exit }; if ($3 == ver) { p=1; next} } p' CHANGELOG.md)"
    - echo ${CHANGELOG}
    - ls -h dist/
    - ls -h dist/deb_dist/
    - ls -h dist/ubuntu_dist/
    - WHEEL_PIP=dist/${PJNAME}-${VERSION}-py3-none-any.whl  
    - echo ${WHEEL_PIP} # echo of theoretical filename.whl
    - DEB_DEBIAN_10=${PJNAME,,} ; DEB_DEBIAN_10=dist/deb_dist/python3-${DEB_DEBIAN_10//\_/\-}_${VERSION}-1_all.deb
    - echo ${DEB_DEBIAN_10} # echo of theoretical filename.deb
    - DEB_UBUNTU_1804=${PJNAME,,} ; DEB_UBUNTU_1804=dist/ubuntu_dist/python3-${DEB_UBUNTU_1804//\_/\-}_${VERSION}-1_all.deb
    - echo ${DEB_UBUNTU_1804} # echo of theoretical filename.deb
    - CONTENT_WHEEL_PIP=$(curl --request POST --header "PRIVATE-TOKEN:${PRIVATE_TOKEN}" --form "file=@${WHEEL_PIP}" ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/uploads)
    - echo ${CONTENT_WHEEL_PIP} # echo of curl response
    - CONTENT_DEB_DEBIAN_10=$(curl --request POST --header "PRIVATE-TOKEN:${PRIVATE_TOKEN}" --form "file=@${DEB_DEBIAN_10}" ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/uploads)
    - echo ${CONTENT_DEB_DEBIAN_10} # echo of curl response
    - CONTENT_DEB_UBUNTU_1804=$(curl --request POST --header "PRIVATE-TOKEN:${PRIVATE_TOKEN}" --form "file=@${DEB_UBUNTU_1804}" ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/uploads)
    - echo ${CONTENT_DEB_UBUNTU_1804} # echo of curl response
    - URL_WHEEL_PIP=${CI_PROJECT_URL}$(jq -r '.url' <<<"$CONTENT_WHEEL_PIP")
    - echo ${URL_WHEEL_PIP}
    - URL_DEB_DEBIAN_10=${CI_PROJECT_URL}$(jq -r '.url' <<<"$CONTENT_DEB_DEBIAN_10")
    - echo ${URL_DEB_DEBIAN_10}
    - URL_DEB_UBUNTU_1804=${CI_PROJECT_URL}$(jq -r '.url' <<<"$CONTENT_DEB_UBUNTU_1804")
    - echo ${URL_DEB_UBUNTU_1804}
    - echo extra ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases   
    - |
      JSON_DATA=$(jq -n -c --arg name "FeedGram v${VERSION}" \
      --arg tag_name "release_${VERSION}" \
      --arg description "## Changelog ${CHANGELOG}" \
      --arg pip "${URL_WHEEL_PIP}" \
      --arg deb10 "${URL_DEB_DEBIAN_10}" \
      --arg ub1804 "${URL_DEB_UBUNTU_1804}" \
      --arg dockerUrl "${CI_PROJECT_URL}/container_registry/" \
      '{ name:$name, tag_name:$tag_name, ref:"master", description:$description, assets:{ links:[  { name:"pip Wheel", url:$pip }, { name:"Debian 10", url:$deb10 }, { name:"Ubuntu 18.04", url:$ub1804 }, { name:"Docker", url:$dockerUrl } ] } }')
    - echo "curl -v --request POST --header 'Content-Type:application/json' --header \"PRIVATE-TOKEN:${PRIVATE_TOKEN}\" --data \"${JSON_DATA}\" ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases"
    - curl -v --request POST --header 'Content-Type:application/json' --header "PRIVATE-TOKEN:${PRIVATE_TOKEN}" --data "${JSON_DATA}" ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases
